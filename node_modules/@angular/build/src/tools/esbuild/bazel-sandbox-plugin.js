"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IS_BAZEL = void 0;
exports.bazelSandboxPlugin = bazelSandboxPlugin;
const path_1 = require("path");
const BAZEL_SANDBOX_RESOLUTION = Symbol('BAZEL_SANDBOX_RESOLUTION');
const BAZEL_BIN_DIR = process.env.BAZEL_BINDIR;
const BAZEL_EXECROOT = process.env.JS_BINARY__EXECROOT;
exports.IS_BAZEL = !!BAZEL_BIN_DIR;
/**
 * Creates an esbuild plugin that ensures module resolution stays within the Bazel sandbox.
 *
 * Under Bazel, esbuild may follow symlinks out of the sandbox when sandboxing is enabled.
 * This plugin uses a separate resolver to detect when resolution leaves the `execroot`
 * (which serves as the sandbox root when sandboxing is active), and rewrites the resolution
 * to remain within the sandbox.
 *
 * See: https://github.com/aspect-build/rules_esbuild/issues/58
 *
 * @returns An esbuild plugin.
 */
function bazelSandboxPlugin() {
    return {
        name: 'angular-bazel-sandbox',
        setup(build) {
            if (!BAZEL_EXECROOT || !BAZEL_BIN_DIR) {
                return;
            }
            build.onResolve({ filter: /./ }, async (args) => {
                const { importer, kind, resolveDir, namespace, pluginData = {} } = args;
                if (pluginData[BAZEL_SANDBOX_RESOLUTION]) {
                    return null;
                }
                pluginData[BAZEL_SANDBOX_RESOLUTION] = true;
                const result = await build.resolve(args.path, {
                    importer,
                    kind,
                    namespace,
                    pluginData,
                    resolveDir,
                });
                if (result.external || result.errors.length) {
                    return result;
                }
                if (result.path.startsWith(BAZEL_EXECROOT)) {
                    return result;
                }
                // If esbuild attempts to leave the execroot, map the path back into the execroot.
                // If it tried to leave bazel-bin, error out completely.
                if (!result.path.includes(BAZEL_BIN_DIR)) {
                    throw new Error(`Error: esbuild resolved a path outside of BAZEL_BINDIR (${BAZEL_BIN_DIR}): ${result.path}`);
                }
                // Otherwise remap the bindir-relative path
                const correctedPath = (0, path_1.join)(BAZEL_EXECROOT, result.path.slice(result.path.indexOf(BAZEL_BIN_DIR)));
                if (process.env.JS_BINARY__LOG_DEBUG) {
                    // eslint-disable-next-line no-console
                    console.error(`DEBUG: [angular-bazel-sandbox] correcting esbuild resolution ${result.path} that left the sandbox to ${correctedPath}.`);
                }
                result.path = correctedPath;
                return result;
            });
        },
    };
}
